set(FIND_CSFML_PATHS    
    /usr/local
    /usr
    /lib
)

find_path(CSFML_INCLUDE_DIR SFML/Config.h
          PATH_SUFFIXES include
          PATHS ${FIND_CSFML_PATHS})

set(CSFML_VERSION_OK TRUE)
set(CSFML_FOUND TRUE)
if (CSFML_FIND_VERSION AND CSFML_INCLUDE_DIR)

    set(CSFML_CONFIG_H_INPUT "${CSFML_INCLUDE_DIR}/SFML/Config.h")
    FILE(READ "${CSFML_CONFIG_H_INPUT}" CSFML_CONFIG_H_CONTENTS)
    STRING(REGEX REPLACE ".*#define CSFML_VERSION_MAJOR ([0-9]+).*" "\\1" CSFML_VERSION_MAJOR "${CSFML_CONFIG_H_CONTENTS}")
    STRING(REGEX REPLACE ".*#define CSFML_VERSION_MINOR ([0-9]+).*" "\\1" CSFML_VERSION_MINOR "${CSFML_CONFIG_H_CONTENTS}")
    STRING(REGEX REPLACE ".*#define CSFML_VERSION_PATCH ([0-9]+).*" "\\1" CSFML_VERSION_PATCH "${CSFML_CONFIG_H_CONTENTS}")
    if (NOT "${CSFML_VERSION_PATCH}" MATCHES "^[0-9]+$")
        set(CSFML_VERSION_PATCH 0)
    endif()
    math(EXPR CSFML_REQUESTED_VERSION "${CSFML_FIND_VERSION_MAJOR} * 10000 + ${CSFML_FIND_VERSION_MINOR} * 100 + ${CSFML_FIND_VERSION_PATCH}")

    if (CSFML_VERSION_MAJOR)
        math(EXPR CSFML_VERSION "${CSFML_VERSION_MAJOR} * 10000 + ${CSFML_VERSION_MINOR} * 100 + ${CSFML_VERSION_PATCH}")

        if(CSFML_VERSION LESS CSFML_REQUESTED_VERSION)
            set(CSFML_VERSION_OK FALSE)
        endif()
    endif()
endif()

if("${CSFML_INCLUDE_DIR}" STREQUAL "CSFML_INCLUDE_DIR-NOTFOUND")
    set(CSFML_FOUND FALSE)
    set(CSFML_INCLUDE_DIR "")
endif()

if(NOT CSFML_VERSION_OK)
    set(FIND_CSFML_ERROR "CSFML found but version too low (requested: ${CSFML_FIND_VERSION}, found: ${CSFML_VERSION_MAJOR}.${CSFML_VERSION_MINOR}.${CSFML_VERSION_PATCH})")
    set(CSFML_FOUND FALSE)
elseif(NOT CSFML_FOUND)
    set(FIND_CSFML_ERROR "Could NOT find CSFML headers")
endif()

if (NOT CSFML_FOUND)
    message(FATAL_ERROR ${FIND_CSFML_ERROR})
endif()

if(CSFML_FOUND)
    message(STATUS "Found CSFML ${CSFML_VERSION_MAJOR}.${CSFML_VERSION_MINOR}.${CSFML_VERSION_PATCH} in ${CSFML_INCLUDE_DIR}")
endif()
